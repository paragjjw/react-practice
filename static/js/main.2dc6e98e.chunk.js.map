{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextBox.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","_useState","useState","backgroundColor","color","_useState2","Object","slicedToArray","react_default","a","createElement","className","style","mode","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Navbar","navStyle","setnavStyle","react_router_dom","to","title","aria-label","aria-current","concat","data-bs-display","marginTop","borderRadius","onClick","document","getElementById","classList","remove","getElementsByClassName","innerText","showStyle","console","log","TextBox","text","setText","Style","htmlFor","fontSize","value","onChange","e","target","border","rows","toUpperCase","disabled","length","toLowerCase","split","filter","element","Alert","height","alert","role","msg","App","setmode","_useState3","_useState4","setalert","_useState5","_useState6","setstyle","showAlert","message","setTimeout","Fragment","theme","body","react_router","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.2dc6e98e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function About(props) {\r\n  const [myStyle, setmyStyle] = useState({\r\n    backgroundColor: \"white\",\r\n    color: \"black\",\r\n  });\r\n  // const [btnText, setbtnText] = useState(\"Enable Dark Mode\");\r\n  // function toggleState() {\r\n  //   if (myStyle.color == \"white\") {\r\n  //     setmyStyle({\r\n  //       backgroundColor: \"white\",\r\n  //       color: \"black\",\r\n  //     });\r\n  //     setbtnText(\"Enable Dark Mode\");\r\n  //   } else {\r\n  //     setmyStyle({\r\n  //       backgroundColor: \"black\",\r\n  //       color: \"white\",\r\n  //       border: \"1px solid white\",\r\n  //     });\r\n  //     setbtnText(\"Enable Light Mode\");\r\n  //   }\r\n  // }\r\n  return (\r\n    <div\r\n      className=\"container my-3\"\r\n      style={{\r\n        color: props.mode == \"light\" ? \"black\" : \"white\",\r\n      }}\r\n    >\r\n      <h1>About Us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div\r\n          className=\"accordion-item\"\r\n          style={{\r\n            backgroundColor:\r\n              props.mode == \"light\"\r\n                ? \"white\"\r\n                : props.mode == \"dark\"\r\n                ? \"grey\"\r\n                : props.mode == \"green\"\r\n                ? \"rgba(168, 210, 77, 0.62)\"\r\n                : \"#d0b1b1\",\r\n            color: props.mode == \"light\" ? \"black\" : \"white\",\r\n          }}\r\n        >\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n              style={{\r\n                backgroundColor:\r\n                  props.mode == \"light\"\r\n                    ? \"white\"\r\n                    : props.mode == \"dark\"\r\n                    ? \"grey\"\r\n                    : props.mode == \"green\"\r\n                    ? \"rgba(168, 210, 77, 0.62)\"\r\n                    : \"#d0b1b1\",\r\n                color: props.mode == \"dark\" ? \"white\" : \"black\",\r\n              }}\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n            style={{\r\n              backgroundColor:\r\n                props.mode == \"light\"\r\n                  ? \"white\"\r\n                  : props.mode == \"dark\"\r\n                  ? \"#eceaeaa3\"\r\n                  : props.mode == \"green\"\r\n                  ? \"rgba(142, 185, 51, 0.62)\"\r\n                  : \"rgb(176, 140, 140)\",\r\n              color: \"black\",\r\n            }}\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"accordion-item\"\r\n          style={{\r\n            backgroundColor:\r\n              props.mode == \"light\"\r\n                ? \"white\"\r\n                : props.mode == \"dark\"\r\n                ? \"grey\"\r\n                : props.mode == \"green\"\r\n                ? \"rgba(168, 210, 77, 0.62)\"\r\n                : \"#d0b1b1\",\r\n            color: props.mode == \"dark\" ? \"white\" : \"black\",\r\n          }}\r\n        >\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n              style={{\r\n                backgroundColor:\r\n                  props.mode == \"light\"\r\n                    ? \"white\"\r\n                    : props.mode == \"dark\"\r\n                    ? \"grey\"\r\n                    : props.mode == \"green\"\r\n                    ? \"rgba(168, 210, 77, 0.62)\"\r\n                    : \"#d0b1b1\",\r\n                color: props.mode == \"dark\" ? \"white\" : \"black\",\r\n              }}\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n            style={{\r\n              backgroundColor:\r\n                props.mode == \"light\"\r\n                  ? \"white\"\r\n                  : props.mode == \"dark\"\r\n                  ? \"#eceaeaa3\"\r\n                  : props.mode == \"green\"\r\n                  ? \"rgba(142, 185, 51, 0.62)\"\r\n                  : \"rgb(176, 140, 140)\",\r\n              color: \"black\",\r\n            }}\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"accordion-item\"\r\n          style={{\r\n            backgroundColor:\r\n              props.mode == \"light\"\r\n                ? \"white\"\r\n                : props.mode == \"dark\"\r\n                ? \"grey\"\r\n                : props.mode == \"green\"\r\n                ? \"rgba(168, 210, 77, 0.62)\"\r\n                : \"#d0b1b1\",\r\n            color: props.mode == \"dark\" ? \"white\" : \"black\",\r\n          }}\r\n        >\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n              style={{\r\n                backgroundColor:\r\n                  props.mode == \"light\"\r\n                    ? \"white\"\r\n                    : props.mode == \"dark\"\r\n                    ? \"grey\"\r\n                    : props.mode == \"green\"\r\n                    ? \"rgba(168, 210, 77, 0.62)\"\r\n                    : \"#d0b1b1\",\r\n                color: props.mode == \"dark\" ? \"white\" : \"black\",\r\n              }}\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n            style={{\r\n              backgroundColor:\r\n                props.mode == \"light\"\r\n                  ? \"white\"\r\n                  : props.mode == \"dark\"\r\n                  ? \"#eceaeaa3\"\r\n                  : props.mode == \"green\"\r\n                  ? \"rgba(142, 185, 51, 0.62)\"\r\n                  : \"rgb(176, 140, 140)\",\r\n              color: \"black\",\r\n            }}\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"container my-3\">\r\n        <button onClick={toggleState} className=\"btn btn-primary\">\r\n          {btnText}\r\n        </button>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default function Navbar(props) {\r\n  const [navStyle, setnavStyle] = useState({\r\n    backgroundColor: \"white\",\r\n    color: \"black\",\r\n  });\r\n  function lightTheme() {\r\n    document.getElementById(\"theme\").classList.remove(\"show\");\r\n    document\r\n      .getElementsByClassName(\"dropdown-menu\")[0]\r\n      .classList.remove(\"show\");\r\n    document.getElementById(\"theme\").innerText = \"Light\";\r\n    setnavStyle({ backgroundColor: \"white\", color: \"black\" });\r\n    props.showStyle();\r\n  }\r\n  function darkTheme() {\r\n    document.getElementById(\"theme\").classList.remove(\"show\");\r\n    document\r\n      .getElementsByClassName(\"dropdown-menu\")[0]\r\n      .classList.remove(\"show\");\r\n    document.getElementById(\"theme\").innerText = \"Dark\";\r\n    setnavStyle({ backgroundColor: \"black\", color: \"white\" });\r\n    props.showStyle();\r\n  }\r\n  function redTheme() {\r\n    document.getElementById(\"theme\").classList.remove(\"show\");\r\n    document\r\n      .getElementsByClassName(\"dropdown-menu\")[0]\r\n      .classList.remove(\"show\");\r\n    document.getElementById(\"theme\").innerText = \"Red\";\r\n    setnavStyle({\r\n      backgroundColor: \"rgb(83, 28, 28)\",\r\n      color: \"white\",\r\n    });\r\n    props.showStyle();\r\n  }\r\n  function greenTheme() {\r\n    document.getElementById(\"theme\").classList.remove(\"show\");\r\n    document\r\n      .getElementsByClassName(\"dropdown-menu\")[0]\r\n      .classList.remove(\"show\");\r\n    document.getElementById(\"theme\").innerText = \"Green\";\r\n    setnavStyle({ backgroundColor: \"#044804\", color: \"white\" });\r\n    console.log(navStyle);\r\n    props.showStyle();\r\n  }\r\n  return (\r\n    <div style={navStyle}>\r\n      {/* <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      > */}\r\n      <nav className=\"navbar navbar-expand-lg\">\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" style={navStyle} to=\"/\">\r\n            {props.title}\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link\r\n                  className=\"nav-link active\"\r\n                  aria-current=\"page\"\r\n                  style={navStyle}\r\n                  to=\"/\"\r\n                >\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" style={navStyle} to=\"/about\">\r\n                  About\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n            <div className=\"btn-group\" style={navStyle}>\r\n              <button\r\n                type=\"button\"\r\n                className={`btn btn-${\r\n                  props.mode == \"light\"\r\n                    ? \"primary\"\r\n                    : props.mode == \"dark\"\r\n                    ? \"secondary\"\r\n                    : props.mode == \"green\"\r\n                    ? \"success\"\r\n                    : \"danger\"\r\n                } dropdown-toggle`}\r\n                data-bs-toggle=\"dropdown\"\r\n                data-bs-display=\"static\"\r\n                aria-expanded=\"false\"\r\n                id=\"theme\"\r\n              >\r\n                Choose a theme\r\n              </button>\r\n              <ul\r\n                className=\"dropdown-menu dropdown-menu-lg-end\"\r\n                aria-labelledby=\"dropdownMenuButton1\"\r\n                style={{\r\n                  backgroundColor:\r\n                    props.mode == \"light\"\r\n                      ? \"white\"\r\n                      : props.mode == \"dark\"\r\n                      ? \"#8c8a8a\"\r\n                      : props.mode == \"green\"\r\n                      ? \"rgb(163, 208, 66)\"\r\n                      : \"#d2b7b7\",\r\n                }}\r\n              >\r\n                <li\r\n                  className=\"dropdown-item disabled\"\r\n                  style={{\r\n                    backgroundColor:\r\n                      props.mode == \"light\"\r\n                        ? \"white\"\r\n                        : props.mode == \"dark\"\r\n                        ? \"#ffffffbf\"\r\n                        : props.mode == \"green\"\r\n                        ? \"#70972a\"\r\n                        : \"#946d6d\",\r\n                    color: \"black\",\r\n                    marginTop: \"-8px\",\r\n                    borderRadius: \"5px\",\r\n                  }}\r\n                >\r\n                  Choose a theme\r\n                </li>\r\n                <li\r\n                  className=\"dropdown-item\"\r\n                  style={{ color: props.mode == \"dark\" ? \"white\" : \"black\" }}\r\n                  onClick={lightTheme}\r\n                >\r\n                  Light\r\n                </li>\r\n                <li\r\n                  className=\"dropdown-item\"\r\n                  style={{ color: props.mode == \"dark\" ? \"white\" : \"black\" }}\r\n                  onClick={darkTheme}\r\n                >\r\n                  Dark\r\n                </li>\r\n                <li\r\n                  className=\"dropdown-item\"\r\n                  style={{ color: props.mode == \"dark\" ? \"white\" : \"black\" }}\r\n                  onClick={greenTheme}\r\n                >\r\n                  Green\r\n                </li>\r\n                <li\r\n                  className=\"dropdown-item\"\r\n                  style={{ color: props.mode == \"dark\" ? \"white\" : \"black\" }}\r\n                  onClick={redTheme}\r\n                >\r\n                  Red\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            {/* <div className=\"form-check form-switch\">\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                role=\"switch\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggle}\r\n              />\r\n              <label\r\n                className={`form-check-label text-${\r\n                  props.mode == \"dark\" ? \"light\" : \"dark\"\r\n                }`}\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                Enable {props.mode == \"dark\" ? \"light\" : \"dark\"} Mode\r\n              </label>\r\n            </div> */}\r\n            {/* <form classNameName=\"d-flex\" role=\"search\">\r\n              <input\r\n                classNameName=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button classNameName=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextBox(props) {\r\n  const [text, setText] = useState(\"\");\r\n  function typeText(e) {\r\n    setText(e.target.value);\r\n  }\r\n  function UpperCase() {\r\n    setText(text.toUpperCase());\r\n  }\r\n  function LowerCase() {\r\n    setText(text.toLowerCase());\r\n  }\r\n\r\n  function clearText() {\r\n    setText(\"\");\r\n  }\r\n  return (\r\n    // <div style={{ color: props.mode == \"dark\" ? \"white\" : \"black\" }}>\r\n    <div style={props.Style}>\r\n      <div className=\"mb-3 container\">\r\n        <label htmlFor=\"textBox\" className=\"form-label\">\r\n          <b style={{ fontSize: \"1.3rem\" }}>Enter text here</b>\r\n        </label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          value={text}\r\n          onChange={typeText}\r\n          style={{\r\n            border: \"1px solid black\",\r\n            backgroundColor:\r\n              props.mode == \"light\"\r\n                ? \"white\"\r\n                : props.mode == \"dark\"\r\n                ? \"#808080b5\"\r\n                : props.mode == \"green\"\r\n                ? \"rgba(168, 210, 77, 0.62)\"\r\n                : \"#d0b1b1\",\r\n            color: props.mode == \"light\" ? \"black\" : \"white\",\r\n          }}\r\n          id=\"textBox\"\r\n          rows=\"8\"\r\n        ></textarea>\r\n        <button\r\n          className={`btn btn-${\r\n            props.mode == \"light\" ? \"primary\" : \"outline-light\"\r\n          } mx-2 my-2`}\r\n          onClick={UpperCase}\r\n          disabled={text.length == 0}\r\n        >\r\n          Convert to Uppercase\r\n        </button>\r\n        <button\r\n          className={`btn btn-${\r\n            props.mode == \"light\" ? \"primary\" : \"outline-light\"\r\n          } mx-2 my-2`}\r\n          onClick={LowerCase}\r\n          disabled={text.length == 0}\r\n        >\r\n          Convert to Lowercase\r\n        </button>\r\n        <button\r\n          className={`btn btn-${\r\n            props.mode == \"light\" ? \"primary\" : \"outline-light\"\r\n          } mx-2 my-2`}\r\n          onClick={clearText}\r\n          disabled={text.length == 0}\r\n        >\r\n          Clear text\r\n        </button>\r\n      </div>\r\n      <div className=\"container\">\r\n        <h1>Your text summary</h1>\r\n        <p>\r\n          {\r\n            text.split(/\\s+/).filter((element) => {\r\n              return element.length !== 0;\r\n            }).length\r\n          }{\" \"}\r\n          words and {text.length} characters\r\n        </p>\r\n        <p>\r\n          {0.008 *\r\n            text.split(/\\s+/).filter((element) => {\r\n              return element.length !== 0;\r\n            }).length}{\" \"}\r\n          Minutes read\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"Nothing to preview\"}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  return (\r\n    <div style={{ height: \"50px\" }}>\r\n      {props.alert && (\r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{props.alert.type == \"success\" ? \"Success! \" : \"\"}</strong>\r\n          {props.alert.msg}\r\n          {/* <button\r\n          type=\"button\"\r\n          class=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button> */}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextBox from \"./components/TextBox\";\nimport { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport React from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Routes,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setalert] = useState(null);\n  const [style, setstyle] = useState({\n    backgroundColor: \"white\",\n    color: \"black\",\n  });\n  function showStyle() {\n    let theme = document.getElementById(\"theme\").innerText;\n    // console.log(theme);\n    if (theme == \"Light\") {\n      showAlert(\"Light theme enabled\", \"success\");\n      setstyle({\n        backgroundColor: \"white\",\n        color: \"black\",\n      });\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n    } else if (theme == \"Dark\") {\n      showAlert(\"Dark theme enabled\", \"success\");\n      setstyle({\n        backgroundColor: \"black\",\n        color: \"white\",\n      });\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"black\";\n      document.body.style.color = \"white\";\n    } else if (theme == \"Red\") {\n      showAlert(\"Red theme enabled\", \"success\");\n      setstyle({\n        backgroundColor: \"rgb(134, 50, 50)\",\n        color: \"white\",\n      });\n      setmode(\"red\");\n      document.body.style.backgroundColor = \"rgb(134, 50, 50)\";\n      document.body.style.color = \"white\";\n    } else if (theme == \"Green\") {\n      showAlert(\"Green theme enabled\", \"success\");\n      setstyle({\n        backgroundColor: \"rgb(33, 115, 33)\",\n        color: \"white\",\n      });\n      setmode(\"green\");\n      document.body.style.backgroundColor = \"rgb(33, 115, 33)\";\n      document.body.style.color = \"white\";\n    }\n  }\n  function showAlert(message, type) {\n    setalert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 2000);\n  }\n  // function toggleMode() {\n  //   if (mode == \"light\") {\n  //     setmode(\"dark\");\n  //     document.body.style.backgroundColor = \"#0c1859\";\n  //     showAlert(\"Dark Mode enables successfully\", \"success\");\n  //   } else {\n  //     setmode(\"light\");\n  //     document.body.style.backgroundColor = \"white\";\n  //     showAlert(\"Light Mode enables successfully\", \"success\");\n  //   }\n  // }\n  return (\n    <Router>\n      <>\n        <Navbar title=\"textUtils\" showStyle={showStyle} mode={mode}></Navbar>\n        <Alert alert={alert}></Alert>\n        <Routes>\n          <Route path=\"/about\" element={<About mode={mode} />} />\n          <Route\n            path=\"/\"\n            element={\n              <TextBox\n                mode={mode}\n                Style={style}\n                showAlert={showAlert}\n              ></TextBox>\n            }\n          />\n        </Routes>\n        {/* <TextBox mode={mode} Style={style} showAlert={showAlert}></TextBox> */}\n      </>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}